{"version":3,"sources":["redux/middleware/logger.js","redux/enhancers/monitorReducerEnhancer.js","redux/reducers/movieList.reducer.js","redux/reducers/index.js","redux/store.js","images/popcorn.jpg","components/Navbar.js","services/themoviedbApi.service.js","components/MovieCard/styled.js","components/MovieCard/index.js","components/SearchBar.js","components/MovieModal/styled.js","components/MovieModal/index.js","components/MovieDetails/styled.js","components/YouTubeEmbed.js","components/MovieDetails/index.js","components/MovieSearch.js","redux/actions/movieList.actions.js","components/UserMovieList.js","App.js","index.js"],"names":["logger","store","next","action","console","group","type","info","result","log","getState","groupEnd","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","state","number","start","performance","now","newState","end","diff","Math","round","movieListReducer","movieList","localStorage","getItem","JSON","parse","payload","list","push","setItem","stringify","updatedList","filter","movieFromList","imdbID","Array","isArray","removeItem","rootReducer","combineReducers","configureStore","preloadedState","middlewares","loggerMiddleware","thunkMiddleware","enhancers","applyMiddleware","composeWithDevTools","Navbar","bg","expand","Container","Brand","as","Link","to","src","popcornLogo","alt","width","height","className","Toggle","Collapse","Nav","myApiKey","process","buildUrl","endpoint","params","url","startsWith","key","TheMovieDbApiService","include_adult","apiUrl","axios","get","success","error","data","status_message","id","StyledRBCard","styled","Card","StyledButtonContainer","div","MovieCard","movie","onShowDetails","onAddToMovieList","onRemoveFromMovieList","title","poster_path","Img","variant","onError","e","target","Body","Title","Button","style","borderRadius","padding","size","disabled","onClick","SearchBar","onSearch","useState","query","searchQuery","setSearchQuery","handleInputChange","event","name","value","warn","localName","Form","onSubmit","preventDefault","Row","Col","md","Control","placeholder","onChange","Select","StyledRBModalHeader","Modal","Header","StyledRBCol","StyledRBModalBody","MovieModal","show","handleModalClose","onClose","children","centered","onHide","xs","sm","lg","closeButton","StyledDetailsContainer","props","backgroundImage","YouTubeEmbed","movieDbId","youtubeId","setYoutubeId","getYouTubeId","movieId","a","getVideos","response","search","results","find","site","useEffect","videoId","opts","playerVars","autoplay","onReady","pauseVideo","MovieDetails","details","setDetails","getMovie","TheMovieDbApi","getDetails","movieResponse","Object","entries","length","Error","Image","fluid","span","offset","color","fontSize","fontWeight","vote_average","status","runtime","genres","overview","tagline","MovieSearch","addMovieToList","searchResults","setSearchResults","showModal","setShowModal","selectedMovieId","setSelectedMovieId","handleSearch","handleAddToUserList","handleOnShowDetails","map","connect","UserMovieList","getMovieList","removeMovieFromList","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"kKASeA,EATA,SAAAC,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAC,GAC5BC,QAAQC,MAAMF,EAAOG,MACrBF,QAAQG,KAAK,cAAeJ,GAC5B,IAAIK,EAASN,EAAKC,GAGlB,OAFAC,QAAQK,IAAI,aAAcR,EAAMS,YAChCN,QAAQO,WACDH,KCYII,EAfb,SAAAC,GAAW,OAAI,SAACC,EAASC,EAAcC,GAYrC,OAAOH,GAXkB,SAACI,EAAOd,GAC/B,IALQe,EAKFC,EAAQC,YAAYC,MACpBC,EAAWR,EAAQG,EAAOd,GAC1BoB,EAAMH,YAAYC,MAClBG,GAREN,EAQWK,EAAMJ,EARPM,KAAKC,MAAe,IAATR,GAAgB,KAY7C,OAFAd,QAAQK,IAAI,wBAAyBe,GAE9BF,IAG4BP,EAAcC,K,QC+BxCW,EA5CU,WAAmC,IAAlCV,EAAiC,uDAFtC,KAE2Bd,EAAW,uCACzD,OAAQA,EAAOG,MACb,IAAK,iBACH,IAAMsB,EAAYC,aAAaC,QAAQ,aAEvC,OAAOF,EACHG,KAAKC,MAAMJ,GACXX,EAEN,IAAK,oBACH,IAAIW,EAAYC,aAAaC,QAAQ,aAUrC,OARIF,GACFA,EAAYG,KAAKC,MAAMJ,GACvBxB,QAAQK,IAAI,+BAAgCN,EAAO8B,SACnDL,EAAUM,KAAKC,KAAKhC,EAAO8B,UAE3BL,EAAY,CAAEM,KAAM,CAAC/B,EAAO8B,UAE9BJ,aAAaO,QAAQ,YAAaL,KAAKM,UAAUT,IAC1CA,EAET,IAAK,yBACH,IAAIA,EAAYC,aAAaC,QAAQ,aAE/BQ,GADNV,EAAYG,KAAKC,MAAMJ,IACOM,KAAKK,QAAO,SAACC,GAAD,OAAmBA,EAAcC,SAAWtC,EAAO8B,QAAQQ,UASrG,OAPIC,MAAMC,QAAQL,IAChBV,EAAY,CAAEM,KAAMI,GACpBT,aAAaO,QAAQ,YAAaL,KAAKM,UAAUT,KAEjDC,aAAae,WAAW,aAGnBhB,EAKT,QACE,OAAOX,IClCE4B,EAJKC,0BAAgB,CAChCnB,qBCKW,SAASoB,EAAeC,GACnC,IAAMC,EAAc,CAACC,EAAkBC,KACjCC,EAAY,CAACC,kBAAe,WAAf,EAAmBJ,GAAcrC,GAEpD,OAAOC,sBAAYgC,EAAaG,EAAgBM,sBAAmB,WAAnB,EAAuBF,I,gECd5D,MAA0B,oC,OCgC1BG,EA1BA,WACb,OACE,cAAC,IAAD,CAAUC,GAAG,QAAQC,OAAO,KAA5B,SACE,eAACC,EAAA,EAAD,WACE,eAAC,IAASC,MAAV,CAAgBC,GAAIC,IAAMC,GAAG,IAA7B,+BAEE,qBACEC,IAAKC,EACLC,IAAI,eACJC,MAAM,KACNC,OAAO,KACPC,UAAU,gCAGd,cAAC,IAASC,OAAV,IACA,cAAC,IAASC,SAAV,UACE,eAACC,EAAA,EAAD,WACE,cAACA,EAAA,EAAIV,KAAL,CAAUD,GAAIC,IAAMC,GAAG,IAAvB,kBACA,cAACS,EAAA,EAAIV,KAAL,CAAUD,GAAIC,IAAMC,GAAG,cAAvB,mC,gFCtBNU,EAAWC,mCASXC,EAAW,SAACC,EAAUC,GAC1B,IAAIC,EAAG,UATO,gCASP,OAAgBF,EAASG,WAAW,KAAOH,EAAW,IAAMA,EAA5D,oBAAgFH,GAEvF,IAAK,IAAIO,KAAOH,EACdC,GAAG,WAAQE,EAAR,YAAeH,EAAOG,IAE3B,OAAOF,GAGYG,E,kIASnB,WAAoB1E,EAAMsE,GAA1B,kFAEQK,IAAgBL,EAAOK,eAAgBL,EAAOK,cAC9CC,EAASR,EAAS,WAAD,OAAYpE,GAAZ,YAAC,eAAwBsE,GAAzB,IAAiCK,mBAH1D,SAIuBE,IAAMC,IAAIF,GAJjC,cAIQ1E,EAJR,QAMa6E,SAA8B,UAAnB7E,EAAO6E,SAC3BjF,QAAQkF,MAAR,kBAAyBhF,EAAzB,aAAkCE,EAAO+E,KAAKC,iBAPlD,kBASShF,EAAO+E,MAThB,2C,wHAsBA,WAAwBjF,EAAMmF,EAAIb,GAAlC,gFACQM,EAASR,EAAS,IAAD,OAAKpE,EAAL,YAAamF,GAAMb,GAD5C,SAEuBO,IAAMC,IAAIF,GAFjC,cAEQ1E,EAFR,QAIa6E,SAA8B,UAAnB7E,EAAO6E,SAC3BjF,QAAQkF,MAAR,WAAkBhF,EAAlB,YAA0BmF,EAA1B,cAAkCjF,EAAO+E,KAAKC,iBALlD,kBAOWhF,EAAO+E,MAPlB,2C,yHAkBA,WAAuBjF,EAAMmF,EAAIb,GAAjC,gFACQM,EAASR,EAAS,IAAD,OAAKpE,EAAL,YAAamF,EAAb,WAA0Bb,GADnD,SAEuBO,IAAMC,IAAIF,GAFjC,cAEQ1E,EAFR,QAIa6E,SAA8B,UAAnB7E,EAAO6E,SAC3BjF,QAAQkF,MAAR,WAAkBhF,EAAlB,YAA0BmF,EAA1B,oBAAwCjF,EAAO+E,KAAKC,iBALxD,kBAOWhF,EAAO+E,MAPlB,2C,2GCjEWG,EAAeC,YAAOC,IAAPD,CAAH,kVAkBZE,EAAwBF,IAAOG,IAAV,iK,SC+CnBC,EAhEG,SAAC,GAAuE,IAArEC,EAAoE,EAApEA,MAAOC,EAA6D,EAA7DA,cAAeC,EAA8C,EAA9CA,iBAAkBC,EAA4B,EAA5BA,sBAEnD7F,EAAiC0F,EAAjC1F,KAAM8F,EAA2BJ,EAA3BI,MAAOC,EAAoBL,EAApBK,YAAaZ,EAAOO,EAAPP,GAMlC,OACE,eAACC,EAAD,WACE,cAACA,EAAaY,IAAd,CACEC,QAAQ,MACRxC,IAAqB,OAAhBsC,EAXQ,kCAW4BA,EAApC,UAAqD5B,oBAArD,2BACLR,IAAKmC,EACLI,QAVc,SAACC,GACnBrG,QAAQK,IAAR,WAAgBgG,EAAEC,OAAOzC,IAAzB,qCAWE,eAACyB,EAAaiB,KAAd,WACE,cAACjB,EAAakB,MAAd,UAAqBR,IACrB,cAACS,EAAA,EAAD,CAAQC,MAAO,CAAEC,aAAc,OAAQC,QAAS,iBAAmBT,QAAQ,eAAeU,KAAK,KAAKC,UAAQ,EAA5G,SAA8G5G,OAE9G,eAACuF,EAAD,WACE,cAACgB,EAAA,EAAD,CAAQN,QAAQ,kBAAkBU,KAAK,KAAKE,QAAS,kBAAMlB,EAAcR,IAAzE,0BAEAS,GACE,cAACW,EAAA,EAAD,CACEN,QAAQ,kBACRU,KAAK,KACLE,QAAS,kBAAMjB,EAAiBT,IAHlC,uBAUFU,GACE,cAACU,EAAA,EAAD,CACEN,QAAQ,kBACRU,KAAK,KACLE,QAAS,kBAAMhB,EAAsBV,IAHvC,iC,gBC2BG2B,EA/DG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,EAAsCC,mBAAS,CAAEC,MAAO,GAAIjH,KAAM,KAAlE,mBAAOkH,EAAP,KAAoBC,EAApB,KAaMC,EAAoB,SAACC,GACzB,IAAQjB,EAAWiB,EAAXjB,OAMHA,EAAOkB,KAKZH,EAAe,2BAAKD,GAAN,kBAAoBd,EAAOkB,KAAOlB,EAAOmB,SAJrDzH,QAAQ0H,KAAR,mCAAyCpB,EAAOqB,aAOpD,OACE,cAACC,EAAA,EAAD,CAAMC,SA3Ba,SAACN,GAEfH,EAAYD,OAAUC,EAAYlH,KAIrC+G,EAASG,GAHTpH,QAAQK,IAAI,qBAKdkH,EAAMO,kBAmBN,SACE,eAACC,EAAA,EAAD,CAAK/D,UAAU,qBAAf,UACE,cAACgE,EAAA,EAAD,CAAKC,GAAI,EAAGjE,UAAU,OAAtB,SACE,cAAC4D,EAAA,EAAKM,QAAN,CACEV,KAAK,QACLW,YAAY,mCACZC,SAAUd,MAGd,cAACU,EAAA,EAAD,UACA,eAACJ,EAAA,EAAKS,OAAN,CACErE,UAAU,UACVwD,KAAK,OACLY,SAAUd,EAHZ,UAKE,wBAAQG,MAAM,GAAd,yBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,KAAd,0BAGF,cAACO,EAAA,EAAD,CAAKC,GAAG,OAAOjE,UAAU,OAAzB,SACE,cAACyC,EAAA,EAAD,CAAQvG,KAAK,SAAb,4B,QCpDGoI,GAAsB/C,YAAOgD,IAAMC,OAAbjD,CAAH,6FAKnBkD,GAAclD,YAAOyC,IAAPzC,CAAH,6HASXmD,GAAoBnD,YAAOgD,IAAMhC,KAAbhB,CAAH,+ECgBfoD,GA3BI,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,KAAeC,EAAiC,EAA1CC,QAA2BC,EAAe,EAAfA,SACrD,OACE,cAAC,IAAD,CACE/E,UAAU,YACV6C,KAAK,KACLmC,UAAQ,EACRJ,KAAMA,EACNK,OAAQJ,EALV,SAOE,eAACd,EAAA,EAAD,WACE,cAACU,GAAD,CAAaS,GAAI,EAAGC,GAAI,EAAGlB,GAAI,EAAGmB,GAAI,IACtC,eAACX,GAAD,CAAaS,IAAE,EAACC,IAAE,EAAClB,IAAE,EAACmB,IAAI,EAA1B,UACE,cAACd,GAAD,CAAqBe,aAAW,EAAhC,kBACA,cAACX,GAAD,UACIK,a,UCjBDO,GAAyB/D,YAAOjC,IAAPiC,CAAH,6EACT,SAAAgE,GAAK,OAAIA,EAAMC,mB,SCwC1BC,GAvCM,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,UAAWxJ,EAAsC,EAAtCA,KAAsC,IAAhC4D,aAAgC,MAAxB,IAAwB,MAAnBC,cAAmB,MAAV,IAAU,EACvE,EAAkCmD,mBAAS,IAA3C,mBAAOyC,EAAP,KAAkBC,EAAlB,KAQMC,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACInF,EAAqBoF,UAAU9J,EAAMwJ,GADzC,OACbO,EADa,QAEbC,EAASD,EAASE,QAAQC,MAAK,SAAAxE,GAAK,MAAmB,YAAfA,EAAMyE,UAGlDT,EAAaM,EAAOvF,KALH,2CAAH,sDAalB,OAJA2F,qBAAU,WACRT,EAAaH,KACZ,CAACA,IAGFC,GACE,cAAC,KAAD,CACEY,QAASZ,EACTa,KAAM,CAAEzG,SAAQD,QAAO2G,WAAY,CAAEC,SAAU,IAC/CC,QAxBgB,SAACpD,GACrBvH,QAAQK,IAAI,mBAEZkH,EAAMjB,OAAOsE,iBCyEFC,GA5EM,SAAC,GAAyB,IAAvBnB,EAAsB,EAAtBA,UAAWxJ,EAAW,EAAXA,KAEjC,EAA8BgH,mBAAS,IAAvC,mBAAO4D,EAAP,KAAgBC,EAAhB,KAEMC,EAAQ,uCAAG,WAAO3F,EAAInF,GAAX,eAAA6J,EAAA,sEACakB,EAAcC,WAAWhL,EAAMmF,GAD5C,OACT8F,EADS,OAEfJ,EAAWI,GAFI,2CAAH,wDAUd,OALAb,qBAAU,WACRU,EAAStB,EAAWxJ,KACnB,CAACwJ,EAAWxJ,IAGwB,IAAnCkL,OAAOC,QAAQP,GAASQ,OACnB,4CAEER,EAAQS,MAEjB,qBAAKvH,UAAU,mBAAf,SACE,6BAAK8G,EAAQS,UAMjB,eAACjC,GAAD,CAAwBE,gBAAiB,0DAAzC,UACE,eAACzB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACwD,GAAA,EAAD,CACE7H,IAA6B,OAAxBmH,EAAQ7E,YA7BF,kCA6BsC6E,EAAQ7E,YAApD,UAAqE5B,oBAArE,2BACLR,IAAKiH,EAAQ9E,MACbyF,OAAK,MAGT,eAACzD,EAAA,EAAD,WACE,eAACD,EAAA,EAAD,CAAKqB,GAAI,EAAT,UACE,cAACpB,EAAA,EAAD,UAAK,6BAAK8C,EAAQ9E,UAClB,cAACgC,EAAA,EAAD,CAAKC,GAAI,CAAEyD,KAAM,EAAGC,OAAQ,GAAKjF,MAAO,CAAEkF,MAAO,qBAAsBC,SAAU,UAAWC,WAAY,QAAxG,SAAmHhB,EAAQiB,kBAE7H,eAAChE,EAAA,EAAD,CAAKqB,GAAI,EAAT,UACE,cAAC3C,EAAA,EAAD,CAAQN,QAAQ,oBAAoBU,KAAK,KAAKC,UAAQ,EAAtD,SAAwDgE,EAAQkB,SAAiB,IACjF,cAACvF,EAAA,EAAD,CAAQN,QAAQ,oBAAoBU,KAAK,KAAKC,UAAQ,EAAtD,SAAwDgE,EAAQmB,UAAkB,IAClF,cAACxF,EAAA,EAAD,CAAQN,QAAQ,oBAAoBU,KAAK,KAAKC,UAAQ,EAAtD,SAAwDgE,EAAQoB,OAAO,GAAG1E,OAAe,OAE3F,eAACO,EAAA,EAAD,CAAKqB,GAAI,EAAT,UACE,sCACA,4BAAI0B,EAAQqB,cAEd,eAACpE,EAAA,EAAD,CAAKqB,GAAI,EAAT,UACE,yCACA,4BAAI0B,EAAQsB,mBAIlB,cAACrE,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAAC,GAAD,CACE0B,UAAWA,EACXxJ,KAAMA,YCnDZmM,GAAc,YAAyB,IAAtBC,EAAqB,EAArBA,eACnB,EAA0CpF,mBAAS,CAAEhH,KAAM,GAAI4B,KAAM,KAArE,mBAAOyK,EAAP,KAAsBC,EAAtB,KACA,EAAkCtF,oBAAS,GAA3C,mBAAOuF,EAAP,KAAkBC,EAAlB,KACA,EAA8CxF,mBAAS,IAAvD,mBAAOyF,EAAP,KAAwBC,EAAxB,KAMMC,EAAY,uCAAG,iCAAA9C,EAAA,6DAAS7J,EAAT,EAASA,KAAMiH,EAAf,EAAeA,MAAf,SACIvC,EAAqBsF,OAAOhK,EAAM,CAAEiH,UADxC,OACb8C,EADa,OAEnBuC,EAAiB,CAAEtM,OAAM4B,KAAMmI,EAASE,UAFrB,2CAAH,sDASZ2C,EAAmB,uCAAG,WAAOzH,GAAP,eAAA0E,EAAA,sEACHnF,EAAqBsG,WAAWqB,EAAcrM,KAAMmF,GADjD,OACpB4E,EADoB,OAE1BqC,EAAerC,GAFW,2CAAH,sDASnB8C,EAAsB,SAAC1H,GAC3BuH,EAAmB,GAAKvH,GACxBqH,GAAa,IAWf,OACE,eAACpJ,EAAA,EAAD,WACE,cAAC,EAAD,CAAW2D,SAAU4F,IACrB,eAAC9E,EAAA,EAAD,WAEE0E,GACE,cAAC,GAAD,CACE7D,KAAM6D,EACN3D,QAbe,WACvB8D,EAAmB,IACnBF,GAAa,IASP,SAIE,cAAC,GAAD,CACEhD,UAAWiD,EACXzM,KAAMqM,EAAcrM,SAM1BoC,MAAMC,QAAN,OAAcgK,QAAd,IAAcA,OAAd,EAAcA,EAAezK,OAASyK,EAAczK,KAAKkL,KAAI,SAACpH,GAAD,OAC3D,cAACoC,EAAA,EAAD,CAAKkB,GAAI,GAAIjB,GAAI,EAAGmB,GAAI,EAAxB,SACE,cAAC,EAAD,CACExD,MAAK,2BAAOA,GAAP,IAAc1F,KAAMqM,EAAcrM,OACvC2F,cAAekH,EACfjH,iBAAkBgH,KAJUlH,EAAMP,cAyBjCgH,GAPfA,GAAcY,aAJU,SAAApM,GAAK,MAAK,CAChCW,UAAWX,EAAMU,oBAKjB,CAAE+K,eC9F0B,SAACzK,GAAD,MAAc,CAAE3B,KAAM,oBAAqB2B,aD4F3DoL,CAGZZ,IEnFEa,GAAgB,YAAuD,IAApD1L,EAAmD,EAAnDA,UAAW2L,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,oBAC9C,EAAkClG,oBAAS,GAA3C,mBAAOuF,EAAP,KAAkBC,EAAlB,KACA,EAA8CxF,mBAAS,IAAvD,mBAAOyF,EAAP,KAAwBC,EAAxB,KAKMG,EAAsB,SAAC1H,GAC3BuH,EAAmBvH,GACnBqH,GAAa,IAef,OAJApC,qBAAU,WACR6C,MACC,CAACA,IAGF,eAAC7J,EAAA,EAAD,WACE,+CACA,eAACyE,EAAA,EAAD,WAEE0E,GACE,cAAC,GAAD,CACE7D,KAAM6D,EACN3D,QAjBe,WACvB8D,EAAmB,IACnBF,GAAa,IAaP,SAIE,cAAC,GAAD,CACEhD,UAAWiD,MAOjBnL,GAAaA,EAAUM,MAAQN,EAAUM,KAAKkL,KAAI,SAACpH,GAAD,OAChD,cAACoC,EAAA,EAAD,CAAKkB,GAAI,GAAIjB,GAAI,EAAGmB,GAAI,EAAxB,SACE,cAAC,EAAD,CACExD,MAAOA,EACPC,cAAekH,EACfhH,sBAAuBqH,KAJKxH,EAAMvD,kBA8BjC6K,GALfA,GAAgBD,aAJQ,SAAApM,GAAK,MAAK,CAChCW,UAAWX,EAAMU,oBAKjB,CAAE4L,aDnFwB,iBAAO,CAAEjN,KAAM,mBCmFzBkN,oBDjFiB,SAACvL,GAAD,MAAc,CAAE3B,KAAM,yBAA0B2B,aC+EnEoL,CAGdC,IC9DaG,GAdH,WACV,OACE,cAAC,IAAD,CAAUxN,MAAO8C,IAAjB,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO2K,OAAK,EAACC,KAAK,IAAIC,UAAWnB,KACjC,cAAC,IAAD,CAAOkB,KAAK,cAAcC,UAAWN,c,OCX/CO,IAASC,OACP,cAAC,GAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.82e48a79.chunk.js","sourcesContent":["const logger = store => next => action => {\n    console.group(action.type)\n    console.info('dispatching', action)\n    let result = next(action)\n    console.log('next state', store.getState())\n    console.groupEnd()\n    return result\n}\n  \nexport default logger","const round = number => Math.round(number * 100) / 100;\n\nconst monitorReducerEnhancer =\n  createStore => (reducer, initialState, enhancer) => {\n    const monitoredReducer = (state, action) => {\n      const start = performance.now()\n      const newState = reducer(state, action)\n      const end = performance.now()\n      const diff = round(end - start)\n\n      console.log('reducer process time:', diff)\n\n      return newState\n    }\n\n    return createStore(monitoredReducer, initialState, enhancer)\n  }\n\nexport default monitorReducerEnhancer","const initialState = null;\n\nconst movieListReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'GET_MOVIE_LIST': {\n      const movieList = localStorage.getItem('movieList');\n\n      return movieList\n        ? JSON.parse(movieList)\n        : state;\n    }\n    case 'ADD_MOVIE_TO_LIST': {\n      let movieList = localStorage.getItem('movieList');\n\n      if (movieList) {\n        movieList = JSON.parse(movieList);\n        console.log('HELLO FROM ADD TO MOVIE LIST', action.payload);\n        movieList.list.push(action.payload);\n      } else {\n        movieList = { list: [action.payload] }\n      }\n      localStorage.setItem('movieList', JSON.stringify(movieList));\n      return movieList;\n    }\n    case 'REMOVE_MOVIE_FROM_LIST': {\n      let movieList = localStorage.getItem('movieList');\n      movieList = JSON.parse(movieList);\n      const updatedList = movieList.list.filter((movieFromList) => movieFromList.imdbID !== action.payload.imdbID);\n\n      if (Array.isArray(updatedList)) {\n        movieList = { list: updatedList };\n        localStorage.setItem('movieList', JSON.stringify(movieList));\n      } else {\n        localStorage.removeItem('movieList');\n      }\n\n      return movieList;\n\n      // console.log('hello from remove movie from list', action.payload);\n      // return action.payload;\n    }\n    default:\n      return state;\n  }\n}\n\nexport default movieListReducer;","import { combineReducers } from \"redux\";\n\nimport movieListReducer from \"./movieList.reducer\";\n\nconst rootReducer = combineReducers({\n    movieListReducer\n});\n\nexport default rootReducer;","import { applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport loggerMiddleware from './middleware/logger';\nimport monitorReducerEnhancer from './enhancers/monitorReducerEnhancer';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from './reducers';\n\nexport default function configureStore(preloadedState) {\n    const middlewares = [loggerMiddleware, thunkMiddleware];\n    const enhancers = [applyMiddleware(...middlewares), monitorReducerEnhancer];\n\n    return createStore(rootReducer, preloadedState, composeWithDevTools(...enhancers))\n}","export default __webpack_public_path__ + \"static/media/popcorn.1d182f4c.jpg\";","import RBNavbar from 'react-bootstrap/Navbar'\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport { Link } from 'react-router-dom';\nimport popcornLogo from '../images/popcorn.jpg';\n\nconst Navbar = () => {\n  return (\n    <RBNavbar bg=\"light\" expand=\"lg\">\n      <Container>\n        <RBNavbar.Brand as={Link} to=\"/\">\n          Movie Database&nbsp;\n          <img\n            src={popcornLogo}\n            alt=\"popcorn logo\"\n            width=\"25\"\n            height=\"25\"\n            className=\"d-inline-block align-top\"\n          />\n        </RBNavbar.Brand>\n        <RBNavbar.Toggle />\n        <RBNavbar.Collapse>\n          <Nav>\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n            <Nav.Link as={Link} to=\"/movie-list\">Movie List</Nav.Link>\n          </Nav>\n        </RBNavbar.Collapse>\n      </Container>\n    </RBNavbar>\n  );\n}\n\nexport default Navbar;\n","import axios from 'axios';\n\nconst myApiKey = process.env.REACT_APP_THEMOVIEDB_API_KEY;\nconst baseUrl = \"https://api.themoviedb.org/3\";\n\n!myApiKey && console.error('No TheMovieDb API key found! Make sure a .env file with REACT_APP_THEMOVIEDB_API_KEY=<YOUR API KEY HERE> exists!');\n\n/**\n * @param {string} endpoint \n * @param {Object} params \n */\nconst buildUrl = (endpoint, params) => {\n  let url = `${baseUrl}${endpoint.startsWith('/') ? endpoint : '/' + endpoint}?api_key=${myApiKey}`;\n\n  for (let key in params) {\n    url += `&${key}=${params[key]}`;\n  }\n  return url;\n}\n\nexport default class TheMovieDbApiService {\n  /**\n   * Search endpoint\n   * https://developers.themoviedb.org/3/search/\n   * GET /search/:type\n   * @param {string} type movie or tv\n   * @param {Object} params at least { query: string } required\n   * @return {Object} { page: number, results: Array<Object> }\n   */\n  static async search(type, params) {\n    // `${baseUrl}/search/${type}?api_key=${myApiKey}&language=en-US&query=${query}&page=${page}&include_adult=false`\n    const include_adult = params.include_adult ? params.include_adult : false;\n    const apiUrl = buildUrl(`/search/${type}`, { ...params, include_adult });\n    const result = await axios.get(apiUrl);\n\n    if (result.success && result.success === \"false\") {\n      console.error(`/search/${type}\\n${result.data.status_message}`);\n    }\n    return result.data;\n  }\n\n  /**\n   * Movies and TV details endpoint\n   * https://developers.themoviedb.org/3/movies/\n   * https://developers.themoviedb.org/3/tv\n   * GET /:type/:id\n   * @param {string} type movie or tv\n   * @param {string|number} id movie or tv identifier\n   * @param {Object} params optional\n   * @return {Object}\n   */\n  static async getDetails(type, id, params) {\n    const apiUrl = buildUrl(`/${type}/${id}`, params);\n    const result = await axios.get(apiUrl);\n\n    if (result.success && result.success === \"false\") {\n      console.error(`/${type}/${id}/\\n${result.data.status_message}`);\n    }\n      return result.data;\n  }\n\n  /**\n   * Movies and TV YouTube videos endpoint\n   * https://developers.themoviedb.org/3/movies/get-movie-videos\n   * @param {string} type movie or tv\n   * @param {string|number} id movie or tv identifier\n   * @param {Object} params optional\n   * @return {Object} { id: number, results: Array<Object> }\n   */\n  static async getVideos(type, id, params) {\n    const apiUrl = buildUrl(`/${type}/${id}/videos`, params);\n    const result = await axios.get(apiUrl);\n\n    if (result.success && result.success === \"false\") {\n      console.error(`/${type}/${id}/videos\\n${result.data.status_message}`);\n    }\n      return result.data;\n  }\n}\n","import styled from 'styled-components';\n\nimport Card from 'react-bootstrap/Card';\n\nexport const StyledRBCard = styled(Card)`\n  width: 14rem;\n  \n  h5 {\n    font-family: Arial Black;\n    letter-spacing: 0.1rem;\n    margin-bottom: 1.0rem\n  }\n  .movie-type {\n    background-color: rgb(255, 196, 189);\n    color: red;\n    margin: 0.2rem 0rem;\n    padding: .375rem 1.0rem;\n    border: 1px solid red;\n    font-size: small;\n  }\n`\n\nexport const StyledButtonContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n\n  .btn {\n    margin: 0 0.1rem\n  }\n`\n","import { PropTypes } from 'prop-types';\nimport { StyledButtonContainer, StyledRBCard } from './styled';\nimport { Row, Col, Button } from 'react-bootstrap';\n\n// Poster can be N/A\nconst MovieCard = ({ movie, onShowDetails, onAddToMovieList, onRemoveFromMovieList }) => {\n  const baseImgUrl = \"https://image.tmdb.org/t/p/w300\";\n  const { type, title, poster_path, id } = movie;\n  \n  const handleError = (e) => {\n    console.log(`\"${e.target.alt}\" poster could not be loaded!`);\n  }\n\n  return (\n    <StyledRBCard>\n      <StyledRBCard.Img\n        variant=\"top\"\n        src={poster_path !== null ? baseImgUrl + poster_path : `${process.env.PUBLIC_URL}/poster-placeholder.png`}\n        alt={title}\n        onError={handleError}\n      />\n      <StyledRBCard.Body>\n        <StyledRBCard.Title>{title}</StyledRBCard.Title>\n        <Button style={{ borderRadius: \"1rem\", padding: \".15rem .75rem\" }} variant=\"outline-info\" size=\"xs\" disabled>{type}</Button>\n      </StyledRBCard.Body>\n        <StyledButtonContainer>\n          <Button variant=\"outline-primary\" size=\"sm\" onClick={() => onShowDetails(id)}>Show Details</Button>\n        {\n          onAddToMovieList && (\n            <Button\n              variant=\"outline-primary\"\n              size=\"sm\"\n              onClick={() => onAddToMovieList(id)}\n            >\n            Add Movie\n            </Button>\n          )\n        }\n        {\n          onRemoveFromMovieList && (\n            <Button\n              variant=\"outline-primary\"\n              size=\"sm\"\n              onClick={() => onRemoveFromMovieList(id)}\n            >\n            Remove Movie\n            </Button>\n          )\n        }\n        </StyledButtonContainer>    \n    </StyledRBCard>\n    );\n  }\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    type: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]).isRequired,\n  }),\n  onShowDetails: PropTypes.func,\n  onAddToMovieList: PropTypes.func,\n  onRemoveFromMovieList: PropTypes.func,\n};\n\nexport default MovieCard;","import PropTypes from 'prop-types';\nimport { useState } from \"react\";\nimport { Form, Row, Col, Button, } from \"react-bootstrap\";\n\nconst SearchBar = ({ onSearch }) => {\n  const [searchQuery, setSearchQuery] = useState({ query: \"\", type: \"\" });\n\n  const onFormSubmit = (event) => {\n    // trigger error message if empty search or type\n    if (!searchQuery.query || !searchQuery.type) {\n      console.log('no search or type')\n      // updateSearchError(true);\n    } else {\n      onSearch(searchQuery);\n    }\n    event.preventDefault();\n  }\n\n  const handleInputChange = (event) => {\n    const { target } = event;\n    // remove error message if previously triggered on submit, lets use redux\n    // if (searchError) {\n    //   updateSearchError(false);\n    // }\n    // catches any input element without name attribute\n    if (!target.name) {\n      console.warn(`received unnamed element ${target.localName}`);\n      return;\n    }\n    // console.log(target.value);\n    setSearchQuery({ ...searchQuery, [target.name]: target.value });\n  }\n\n  return (\n    <Form onSubmit={onFormSubmit}>\n      <Row className=\"align-items-center\">\n        <Col md={6} className=\"my-1\">\n          <Form.Control\n            name=\"query\"\n            placeholder=\"Search for a Movie or TV Series!\"\n            onChange={handleInputChange}   \n            />\n        </Col>\n        <Col>\n        <Form.Select\n          className=\"me-sm-2\"\n          name=\"type\"\n          onChange={handleInputChange}\n        >\n          <option value=\"\">Select Type</option>\n          <option value=\"movie\">Movie</option>\n          <option value=\"tv\">TV Show</option>\n        </Form.Select>\n        </Col>\n        <Col md=\"auto\" className=\"my-1\">\n          <Button type=\"submit\">Search</Button>\n        </Col>\n      </Row>\n    </Form>\n  )\n}\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func,\n}\n\n\nexport default SearchBar;","import styled from 'styled-components';\nimport { Modal, Col } from 'react-bootstrap';\n\nexport const StyledRBModalHeader = styled(Modal.Header)`\n  border: 1px solid lightgray;\n  background-color: whitesmoke;\n`\n\nexport const StyledRBCol = styled(Col)`\n  background-color: lightgray;\n  padding: 0vw;\n\n  & + & {\n    background-color: white;\n  }\n`\n\nexport const StyledRBModalBody = styled(Modal.Body)`\n  border: 1px solid lightgray;\n  overflow: auto;\n`;\n\n","import { PropTypes } from 'prop-types';\nimport { Row, } from 'react-bootstrap';\nimport RBModal from 'react-bootstrap/Modal';\n\nimport { StyledRBCol, StyledRBModalBody, StyledRBModalHeader } from './styled';\n// show: boolean, onClose: function, children: Component\nconst MovieModal = ({ show, onClose: handleModalClose, children }) => {\n  return (\n    <RBModal\n      className=\"show-grid\"\n      size=\"xl\"\n      centered\n      show={show}\n      onHide={handleModalClose}\n    >\n      <Row>\n        <StyledRBCol xs={2} sm={2} md={3} lg={3} />\n        <StyledRBCol xs sm md lg={true}>\n          <StyledRBModalHeader closeButton>&nbsp;</StyledRBModalHeader>\n          <StyledRBModalBody>\n            { children }\n          </StyledRBModalBody>\n        </StyledRBCol>\n      </Row>\n    </RBModal>\n  )\n}\n\nMovieModal.propTypes = {\n  show: PropTypes.bool,\n  onClose: PropTypes.func,\n}\n\nexport default MovieModal;","import styled from 'styled-components';\nimport { Container, Button } from 'react-bootstrap';\n \nexport const StyledDetailsContainer = styled(Container)`\n  background-image: url(${props => props.backgroundImage});\n  height: 100vh;\n`\n\n// const ReversedButton = props => <Button {...props} children={props.children.split('').reverse()} />\n","import PropTypes from 'prop-types';\nimport YouTube from 'react-youtube';\nimport TheMovieDbApiService from '../services/themoviedbApi.service';\nimport { useEffect, useState } from 'react';\n\nconst YouTubeEmbed = ({ movieDbId, type, width = 720, height = 512 }) => {\n  const [youtubeId, setYoutubeId] = useState('');\n\n  const handleOnReady = (event) => {\n    console.log('handle on ready');\n    // access to player in all event handlers via event.target\n    event.target.pauseVideo();\n  }\n\n  const getYouTubeId = async (movieId) => {\n    const response = await TheMovieDbApiService.getVideos(type, movieDbId);\n    const search = response.results.find(movie => movie.site === 'YouTube');\n    \n    if (search) {\n      setYoutubeId(search.key);\n    }\n  }\n\n  useEffect(() => {\n    getYouTubeId(movieDbId);\n  }, [movieDbId]);\n\n  return (\n    youtubeId &&\n      <YouTube\n        videoId={youtubeId}\n        opts={{ height, width, playerVars: { autoplay: 0 } }}\n        onReady={handleOnReady}\n      />\n  )\n}\n\nYouTubeEmbed.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default YouTubeEmbed;","import { useEffect, useState } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Row, Col, Image, Button } from 'react-bootstrap';\nimport { StyledDetailsContainer } from './styled';\nimport YouTubeEmbed from '../YouTubeEmbed';\n\nimport TheMovieDbApi from '../../services/themoviedbApi.service';\n\nconst MovieDetails = ({ movieDbId, type }) => {\n  const baseImgUrl = \"https://image.tmdb.org/t/p/w300\";\n  const [details, setDetails] = useState({});\n\n  const getMovie = async (id, type) => {\n    const movieResponse = await TheMovieDbApi.getDetails(type, id);\n    setDetails(movieResponse);\n  }\n\n  useEffect(() => {\n    getMovie(movieDbId, type) // maybe type check this\n  }, [movieDbId, type]);\n\n  // empty object state means were still loading...\n  if (Object.entries(details).length === 0) {\n    return <h2>Loading...</h2>\n  // api returns an error\n  } else if (details.Error) {\n    return (\n    <div className=\"movie-list-error\">\n      <h2>{details.Error}</h2>\n    </div>\n    )\n  }\n\n  return (\n  <StyledDetailsContainer backgroundImage={\"https://mdbootstrap.com/img/Photos/Others/images/76.jpg\"}>\n    <Row>\n      <Col>\n        <Image\n          src={details.poster_path !== null ? baseImgUrl + details.poster_path : `${process.env.PUBLIC_URL}/poster-placeholder.png`}\n          alt={details.title}\n          fluid\n        />\n      </Col>\n      <Col>\n        <Row lg={2}>\n          <Col><h2>{details.title}</h2></Col>\n          <Col md={{ span: 4, offset: 2 }} style={{ color: \"rgb(113, 151, 255)\", fontSize: \"x-large\", fontWeight: \"bold\" }}>{details.vote_average}</Col>\n        </Row>\n        <Row lg={3}>\n          <Button variant=\"outline-secondary\" size=\"sm\" disabled>{details.status}</Button>{' '}\n          <Button variant=\"outline-secondary\" size=\"sm\" disabled>{details.runtime}</Button>{' '}\n          <Button variant=\"outline-secondary\" size=\"sm\" disabled>{details.genres[0].name}</Button>{' '}\n        </Row>\n        <Row lg={1}>\n          <h3>Plot</h3>\n          <p>{details.overview}</p>\n        </Row>\n        <Row lg={1}>\n          <h3>Tagline</h3>\n          <p>{details.tagline}</p>\n        </Row>\n      </Col>\n    </Row>\n    <Row> \n      <Col>\n        <YouTubeEmbed\n          movieDbId={movieDbId}\n          type={type}\n        />\n      </Col>\n    </Row>\n  </StyledDetailsContainer>\n\n  );\n}\n\nMovieDetails.propTypes = {\n  movieDbId: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n  type: PropTypes.string.isRequired\n};\n\nexport default MovieDetails;","import { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { addMovieToList } from '../redux/actions/movieList.actions'\n\nimport TheMovieDbApiService from '../services/themoviedbApi.service';\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport MovieCard from './MovieCard';\nimport SearchBar from './SearchBar';\nimport MovieModal from './MovieModal';\nimport MovieDetails from './MovieDetails';\n\n// const example = { \"adult\": false, \"backdrop_path\": \"/7RyHsO4yDXtBv1zUU3mTpHeQ0d5.jpg\", \"genre_ids\": [12, 878, 28], \"id\": 299534, \"original_language\": \"en\", \"original_title\": \"Avengers: Endgame\", \"overview\": \"After the devastating events of Avengers: Infinity War, the universe is in ruins due to the efforts of the Mad Titan, Thanos. With the help of remaining allies, the Avengers must assemble once more in order to undo Thanos' actions and restore order to the universe once and for all, no matter what consequences may be in store.\", \"popularity\": 245.575, \"poster_path\": \"/or06FN3Dka5tukK1e9sl16pB3iy.jpg\", \"release_date\": \"2019-04-24\", \"title\": \"Avengers: Endgame\", \"video\": false, \"vote_average\": 8.3, \"vote_count\": 18720 }\n\n/** Movie Search page route: / */\nlet MovieSearch = ({ addMovieToList }) => {\n  const [searchResults, setSearchResults] = useState({ type: \"\", list: [] });\n  const [showModal, setShowModal] = useState(false);\n  const [selectedMovieId, setSelectedMovieId] = useState('');\n\n  /**\n   * handler for onClick search button\n   * @param {Object} { type: string, query: string }\n   */ \n  const handleSearch = async ({ type, query }) => {\n    const response = await TheMovieDbApiService.search(type, { query });\n    setSearchResults({ type, list: response.results });\n  }\n\n  /**\n   * handler for onClick add to user list button\n   * @param {string|number} id \n   */\n  const handleAddToUserList = async (id) => {\n    const response = await TheMovieDbApiService.getDetails(searchResults.type, id);\n    addMovieToList(response); // will need to expand this with type inside response, let redux handle it\n  }\n\n  /**\n   * handler for onClick show details button\n   * @param {string|number} id \n   */\n  const handleOnShowDetails = (id) => {\n    setSelectedMovieId(\"\" + id);\n    setShowModal(true);\n  }\n\n  /**\n   * handler for onClose modal button\n   */\n  const handleModalClose = () => {\n    setSelectedMovieId(\"\");\n    setShowModal(false);\n  }\n\n  return (\n    <Container>\n      <SearchBar onSearch={handleSearch} />\n      <Row>\n      {\n        showModal && (\n          <MovieModal\n            show={showModal}\n            onClose={handleModalClose}\n          >\n            <MovieDetails\n              movieDbId={selectedMovieId}\n              type={searchResults.type}\n            />\n          </MovieModal>\n        )\n      }\n      {\n        Array.isArray(searchResults?.list) && searchResults.list.map((movie) => (\n          <Col xs={12} md={6} lg={3} key={movie.id}>\n            <MovieCard \n              movie={{ ...movie, type: searchResults.type }}\n              onShowDetails={handleOnShowDetails} // showModal\n              onAddToMovieList={handleAddToUserList}\n            />\n          </Col>\n        ))\n      }\n      </Row>\n    </Container>\n  )\n}\n\nconst mapStateToProps = state => ({\n  movieList: state.movieListReducer,\n});\n\nMovieSearch = connect(\n  mapStateToProps,\n  { addMovieToList },\n)(MovieSearch)\n\n// removeMovieFromList\n\nexport default MovieSearch;","export const getMovieList = () => ({ type: 'GET_MOVIE_LIST' });\nexport const addMovieToList = (payload) => ({ type: 'ADD_MOVIE_TO_LIST', payload });\nexport const removeMovieFromList = (payload) => ({ type: 'REMOVE_MOVIE_FROM_LIST', payload });\nexport const setSelectedMovieId = (payload) => ({ type: 'SET_SELECTED_MOVIE_ID', payload })\n","import { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { getMovieList, removeMovieFromList } from '../redux/actions/movieList.actions';\nimport MovieCard from './MovieCard';\nimport MovieModal from './MovieModal';\nimport MovieDetails from './MovieDetails';\nimport YouTubeEmbed from './YouTubeEmbed';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\n\n/** User Movie List page route: /movie-list */\nlet UserMovieList = ({ movieList, getMovieList, removeMovieFromList }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [selectedMovieId, setSelectedMovieId] = useState(''); \n  /**\n   * handler for show details button on a MovieCard\n   * @param {string} id \n   */\n  const handleOnShowDetails = (id) => {\n    setSelectedMovieId(id);\n    setShowModal(true);\n  }\n\n  /**\n   * handler for close button on MovieModal\n   */\n  const handleModalClose = () => {\n    setSelectedMovieId(\"\");\n    setShowModal(false);\n  }\n  \n  useEffect(() => {\n    getMovieList();\n  }, [getMovieList])\n\n  return (\n    <Container>\n      <h1>My Movie List</h1>\n      <Row>\n      {\n        showModal && (\n          <MovieModal\n            show={showModal}\n            onClose={handleModalClose}\n          >\n            <MovieDetails\n              movieDbId={selectedMovieId}\n              \n            />\n          </MovieModal>\n        )\n      }\n      {\n        movieList && movieList.list && movieList.list.map((movie) => (\n          <Col xs={12} md={6} lg={3} key={movie.imdbID}>\n            <MovieCard \n              movie={movie}\n              onShowDetails={handleOnShowDetails}\n              onRemoveFromMovieList={removeMovieFromList}\n            />\n            {/* <Card style={{ width: '18rem' }}>\n              <Card.Img variant=\"top\" src={movie.Poster} alt={`${movie.Title} poster`} />\n              <Card.Body>\n                <Card.Title>{movie.Title}</Card.Title>\n                <Button variant=\"primary\" onClick={() => removeMovieFromList(movie)}>Remove From List</Button>\n              </Card.Body>\n            </Card> */}\n          </Col>\n        ))\n      }\n      </Row>\n    </Container>\n  );\n}\n\nconst mapStateToProps = state => ({\n  movieList: state.movieListReducer,\n});\n\nUserMovieList = connect(\n  mapStateToProps,\n  { getMovieList, removeMovieFromList }\n)(UserMovieList)\n\nexport default UserMovieList;\n","import configureStore from './redux/store';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\n\nimport MovieSearch from './components/MovieSearch';\nimport UserMovieList from './components/UserMovieList';\n\nconst App = () => {\n  return (\n    <Provider store={configureStore()}>\n      <HashRouter>\n        <Navbar/>\n        <Switch>\n          <Route exact path=\"/\" component={MovieSearch} />\n          <Route path=\"/movie-list\" component={UserMovieList} />\n        </Switch>\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}